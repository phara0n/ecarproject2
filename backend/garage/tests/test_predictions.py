from django.urls import reverse
from django.contrib.auth import get_user_model
from rest_framework import status
from rest_framework.test import APITestCase, APIClient

from ..models import Vehicle, ServiceType, PredictionRule, ServicePrediction, CustomerProfile

User = get_user_model()

class PredictionAPITests(APITestCase):
    """Tests for the PredictionRule and ServicePrediction API endpoints."""

    @classmethod
    def setUpTestData(cls):
        """Set up data for the whole TestCase."""
        # Create users
        cls.client_user = User.objects.create_user(
            username='predictiontestclient', 
            password='testpassword123'
        )
        cls.admin_user = User.objects.create_user(
            username='predictiontestadmin', 
            password='testpassword123',
            is_staff=True, 
            is_superuser=True
        )
        CustomerProfile.objects.create(user=cls.client_user, phone_number='+21677777777')
        
        # Create vehicle and service type
        cls.client_vehicle = Vehicle.objects.create(
            owner=cls.client_user, make='PredMake', model='PredModel',
            registration_number='PRED123', initial_mileage=20000
        )
        cls.service_type = ServiceType.objects.create(name="Inspection Annuelle", default_interval_km=15000)

        # Create an initial prediction rule (by admin logic, usually)
        cls.rule = PredictionRule.objects.create(
            service_type=cls.service_type,
            interval_km=15000,
            is_active=True
        )
        
        # Create an initial service prediction (usually generated by signals/tasks)
        cls.prediction = ServicePrediction.objects.create(
            vehicle=cls.client_vehicle,
            service_type=cls.service_type,
            predicted_due_mileage=35000, # Example value
            prediction_source='RULE'
        )

        # URLs
        cls.rule_list_create_url = reverse('predictionrule-list')
        cls.rule_detail_url = lambda pk: reverse('predictionrule-detail', kwargs={'pk': pk})
        cls.prediction_list_url = reverse('serviceprediction-list')
        cls.prediction_detail_url = lambda pk: reverse('serviceprediction-detail', kwargs={'pk': pk})

    def setUp(self):
        """Set up for each test method."""
        self.client = APIClient()
        # Default to client auth
        self.client.force_authenticate(user=self.client_user)

    # --- PredictionRule Tests (Admin Only) --- 
    
    def test_client_cannot_access_prediction_rules(self):
        """Test non-admin user gets 403 Forbidden for PredictionRule endpoints."""
        # List
        response_list = self.client.get(self.rule_list_create_url)
        self.assertEqual(response_list.status_code, status.HTTP_403_FORBIDDEN)
        
        # Create attempt
        data = {'service_type': self.service_type.pk, 'interval_km': 1000}
        response_create = self.client.post(self.rule_list_create_url, data, format='json')
        self.assertEqual(response_create.status_code, status.HTTP_403_FORBIDDEN)
        
        # Retrieve attempt
        url_detail = self.rule_detail_url(self.rule.pk)
        response_retrieve = self.client.get(url_detail)
        self.assertEqual(response_retrieve.status_code, status.HTTP_403_FORBIDDEN)
        
        # Update attempt
        response_patch = self.client.patch(url_detail, {'interval_km': 2000}, format='json')
        self.assertEqual(response_patch.status_code, status.HTTP_403_FORBIDDEN)
        
        # Delete attempt
        response_delete = self.client.delete(url_detail)
        self.assertEqual(response_delete.status_code, status.HTTP_403_FORBIDDEN)
    
    def test_admin_can_crud_prediction_rules(self):
        """Test admin user can perform CRUD operations on PredictionRule."""
        self.client.force_authenticate(user=self.admin_user)
        initial_count = PredictionRule.objects.count()
        
        # List
        response_list = self.client.get(self.rule_list_create_url)
        self.assertEqual(response_list.status_code, status.HTTP_200_OK)
        results = response_list.data if not isinstance(response_list.data, dict) or 'results' not in response_list.data else response_list.data['results']
        self.assertEqual(len(results), initial_count)
        
        # Create (Need a different service type as rules are unique per type)
        other_service_type = ServiceType.objects.create(name="Freinage Check")
        new_rule_data = {
            'service_type_id': other_service_type.pk, # Use service_type_id based on serializer
            'interval_km': 30000,
            'is_active': True
        }
        response_create = self.client.post(self.rule_list_create_url, new_rule_data, format='json')
        self.assertEqual(response_create.status_code, status.HTTP_201_CREATED)
        self.assertEqual(PredictionRule.objects.count(), initial_count + 1)
        new_rule_pk = response_create.data['id']
        
        # Retrieve
        detail_url = self.rule_detail_url(new_rule_pk)
        response_retrieve = self.client.get(detail_url)
        self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK)
        self.assertEqual(response_retrieve.data['interval_km'], 30000)
        
        # Update (PATCH)
        update_data = {'interval_km': 35000, 'is_active': False}
        response_patch = self.client.patch(detail_url, update_data, format='json')
        self.assertEqual(response_patch.status_code, status.HTTP_200_OK)
        updated_rule = PredictionRule.objects.get(pk=new_rule_pk)
        self.assertEqual(updated_rule.interval_km, 35000)
        self.assertFalse(updated_rule.is_active)
        
        # Delete
        response_delete = self.client.delete(detail_url)
        self.assertEqual(response_delete.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(PredictionRule.objects.count(), initial_count)
    
    # --- ServicePrediction Tests (Read Only) --- 
    
    def test_cannot_modify_service_predictions(self):
        """Test users cannot Create, Update, or Delete ServicePredictions via API."""
        # Attempt Create (as client)
        create_data = {
            'vehicle_id': self.client_vehicle.pk,
            'service_type_id': self.service_type.pk,
            'predicted_due_mileage': 40000 
        }
        response_create_client = self.client.post(self.prediction_list_url, create_data, format='json')
        # ReadOnlyViewSet doesn't provide POST, expect 405 Method Not Allowed
        self.assertEqual(response_create_client.status_code, status.HTTP_405_METHOD_NOT_ALLOWED)

        # Attempt Update (PATCH) (as client)
        detail_url = self.prediction_detail_url(self.prediction.pk)
        update_data = {'predicted_due_mileage': 41000}
        response_patch_client = self.client.patch(detail_url, update_data, format='json')
        self.assertEqual(response_patch_client.status_code, status.HTTP_405_METHOD_NOT_ALLOWED)

        # Attempt Delete (as client)
        response_delete_client = self.client.delete(detail_url)
        self.assertEqual(response_delete_client.status_code, status.HTTP_405_METHOD_NOT_ALLOWED)
        
        # Verify same for Admin
        self.client.force_authenticate(user=self.admin_user)
        response_create_admin = self.client.post(self.prediction_list_url, create_data, format='json')
        self.assertEqual(response_create_admin.status_code, status.HTTP_405_METHOD_NOT_ALLOWED)
        response_patch_admin = self.client.patch(detail_url, update_data, format='json')
        self.assertEqual(response_patch_admin.status_code, status.HTTP_405_METHOD_NOT_ALLOWED)
        response_delete_admin = self.client.delete(detail_url)
        self.assertEqual(response_delete_admin.status_code, status.HTTP_405_METHOD_NOT_ALLOWED)

    def test_client_can_list_retrieve_own_service_predictions(self):
        """Test client can list/retrieve only their own service predictions."""
        # Create prediction for another vehicle (owned by admin)
        self.client.force_authenticate(user=self.admin_user) # Need admin to create vehicle/prediction
        admin_vehicle = Vehicle.objects.create(
             owner=self.admin_user, make='AdminCarPred', model='ACP', 
             registration_number='ADMINPRED1', initial_mileage=1500
        )
        other_prediction = ServicePrediction.objects.create(
            vehicle=admin_vehicle,
            service_type=self.service_type,
            predicted_due_mileage=20000 # Example
        )
        
        # Switch back to client
        self.client.force_authenticate(user=self.client_user)
        
        # Test List
        response_list = self.client.get(self.prediction_list_url)
        self.assertEqual(response_list.status_code, status.HTTP_200_OK)
        results = response_list.data if not isinstance(response_list.data, dict) or 'results' not in response_list.data else response_list.data['results']
        self.assertEqual(len(results), 1) # Should only see prediction for self.prediction
        self.assertEqual(results[0]['id'], self.prediction.pk)
        
        # Test Retrieve Own
        detail_url_own = self.prediction_detail_url(self.prediction.pk)
        response_retrieve_own = self.client.get(detail_url_own)
        self.assertEqual(response_retrieve_own.status_code, status.HTTP_200_OK)
        self.assertEqual(response_retrieve_own.data['id'], self.prediction.pk)
        
        # Test Retrieve Other (should fail, 404)
        detail_url_other = self.prediction_detail_url(other_prediction.pk)
        response_retrieve_other = self.client.get(detail_url_other)
        self.assertEqual(response_retrieve_other.status_code, status.HTTP_404_NOT_FOUND)

    def test_admin_can_list_retrieve_all_service_predictions(self):
        """Test admin can list/retrieve all service predictions."""
        # Create prediction for another vehicle (owned by admin)
        self.client.force_authenticate(user=self.admin_user) 
        admin_vehicle = Vehicle.objects.create(
             owner=self.admin_user, make='AdminCarPred2', model='ACP2', 
             registration_number='ADMINPRED2', initial_mileage=2500
        )
        other_prediction = ServicePrediction.objects.create(
            vehicle=admin_vehicle,
            service_type=self.service_type,
            predicted_due_mileage=22000 # Example
        )
        
        initial_count = ServicePrediction.objects.count() # Should be 2 now
        
        # Test List (as Admin)
        response_list = self.client.get(self.prediction_list_url)
        self.assertEqual(response_list.status_code, status.HTTP_200_OK)
        results = response_list.data if not isinstance(response_list.data, dict) or 'results' not in response_list.data else response_list.data['results']
        self.assertEqual(len(results), initial_count)
        
        # Test Retrieve Other (as Admin)
        detail_url_other = self.prediction_detail_url(other_prediction.pk)
        response_retrieve_other = self.client.get(detail_url_other)
        self.assertEqual(response_retrieve_other.status_code, status.HTTP_200_OK)
        self.assertEqual(response_retrieve_other.data['id'], other_prediction.pk)

    # Can add admin list/retrieve all test if needed

